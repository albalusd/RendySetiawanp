# Example Kore configuration

# Server configuration.
#bind		127.0.0.1 443
#bind		::1 443
bind		10.211.55.3 4443

# The path worker processes will chroot into after starting.
chroot		/home/joris/src/kore

# Worker processes will run as the specified user.
runas		joris

# Set workers to the amount of CPU's available in your system,
# kore will automatically distribute all workers on them.
workers		4

# The number of active connections each worker can handle.
# You might have to tweak this number based on your hardware.
#worker_max_connections		250

# Store the main process its pid in this file.
#pidfile	/var/run/kore.pid
pidfile		kore.pid

# The onload function is called everytime the module is loaded or reloaded.
#onload myinit

# You can define a callback Kore calls from its parent process or
# workers everytime the kore_cb_interval timer (in milliseconds) is reached.
#
# NOTE: Remember that the parent process runs as root and is not chroot().
# NOTE: If you want the cb to run on a worker, be sure to set kore_cb_worker.
#kore_cb		my_callback
#kore_cb_interval	1000
#kore_cb_worker		3

# HTTP specific settings.
#	http_header_max		Maximum size of HTTP headers (in bytes).
#
#	http_postbody_max	Maximum size of an HTTP POST body (in bytes).
#
#	http_keepalive_time	Maximum seconds an HTTP connection can be
#				kept alive by the browser.
#				(Set to 0 to disable keepalive completely).
#
#	http_hsts_enable	Send Strict Transport Security header in
#				all responses. Parameter is the age.
#				(Set to 0 to disable sending this header).
#http_header_max	4096
#http_postbody_max	10240000
#http_keepalive_time	20
#http_hsts_enable	31536000

# Specifies what module to be loaded.
load modules/example/example.module

# Validators
#	validator	name	type	regex|function
#
validator	v_example	function	v_example_func
validator	v_regex		regex		^/test/[a-z]*$

# Specify the SSL ciphers that will be used.
#ssl_cipher	ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK

# If you wish to use EDH / ECDH specify a file containing
# a generated DH key (See OpenSSL dhparam).
#ssl_dhparam	dh2048.pem

# Set this if you want to disable SSL zlib compression.
ssl_no_compression

# Specify the amount of seconds a SPDY connection is kept open.
# You can keep it open indefinately by setting this to 0.
#spdy_idle_time		120

# Domain configuration
#
# Each domain configuration starts with listing what domain
# the directives that follow are to be applied upon.
#
# Additionally you can specify the following in a domain configuration:
#
#	accesslog:	File where all requests are logged.
#
# Handlers
#
# Handlers are either static (for fixed paths) or dynamic.
# Dynamic handlers take a POSIX regular expression as its path.
#
# Syntax:
#	handler		path		module_callback

# Example domain that responds to localhost.
#domain localhost {
domain 10.211.55.3 {
	certfile	cert/server.crt
	certkey		cert/server.key
	accesslog	kore_access.log

	# Static page handlers
	static		/css/style.css		serve_style_css
	static		/			serve_index
	static		/intro.jpg		serve_intro
	static		/b64test		serve_b64test
	static		/spdy-reset		serve_spdyreset
	static		/upload			serve_file_upload
	static		/lock-test		serve_lock_test
	static		/validator		serve_validator

	#
	# We can use a dynamic handler to accept GET parameters.
	#
	dynamic ^/params-test(\??)[A-Z0-9a-z=&]*$ serve_params_test

	# Configure /params-test POST to only accept the following parameters.
	# They are automatically tested against the validator listed.
	# If the validator would fail Kore will automatically remove the
	# failing parameter, indicating something was wrong with it.
	# Any parameters not present in the params block are also filtered out.
	params post ^/params-test(\??)[A-Z0-9a-z=&]*$ {
		validate	test1		v_example
		validate	test2		v_regex
	}

	# Configure a GET parameter that /params-test can received. As before
	# this is validated against the validator and removed if validation
	# fails. All extra parameters in the GET query are filtered out.
	params get ^/params-test(\??)[A-Z0-9a-z=&]*$ {
		validate	arg1		v_example
	}
}

#domain domain.com {
#	certfile	cert/other/server.crt
#	certkey		cert/other/server.key
#	accesslog	/var/log/other_kore_access.log
#	static		/css/style.css		serve_style_css
#	static		/			serve_index
#	dynamic		^/[a-z0-9_]*$		serve_profile
#}
