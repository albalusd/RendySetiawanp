.TH KODEV 1
.SH NAME
kodev \- Kore project management tool

.SH SYNOPSIS
.BR kodev
[\fIOPTION\fR] ...

.SH DESCRIPTION
This documentation describes the application management tools for building and
running a kore project. For information regarding the technical interface and
C bindings, look to
.BR KORE(3)
where these functions and structures are described.
.BR kore
projects may be managed using the following OPTIONS;

.BR create
.RS
Create a new application skeleton with the name that is passed to it. This will
create a new directory with all the files required to begin hacking about.
This will also generate a self-signed certificate \fIunless\fR \fBkore\fR was
built with \fBNOTLS=1\fR. Note this certificate should not be used for
production.
.RE

.BR build
.RS
Build the application. The properties of this build are read from
.BR conf/build.conf
and the semantics of which are discussed in \fBCONFIGURATION FILES\fR
.RE

.BR run
.RS
Run an application (\-fnr implied). The current directory is the path of the
project to be run. This will read from the \fBconf/app.conf\fR discussed in
\fBCONFIGURATION FILES\fR unless otherwise specified. This will build the
application\-\-if necessary\-\-and start it in the foregound. \fB^C\fR
will stop the process.
.RE

.BR reload
.RS
Reload the application (SIGHUP sent). Reads the application run configuration
which would be read in a normal run on a reload.
.RE

.BR info
.RS
Show info on kore on this system. Namely; active flavour, output type, kore
features, kore source and kore binary.
.RE

.BR clean
.RS
Cleanup the build files.
.RE

.BR flavour
.RS
Switch between build flavours with the argument being the new flavour.
.RE

.BR help
.RS
Show the help synopsis.
.RE

.BR \-p
.RS
Option used in conjunction with \fBcreate\fR to generate an application for use
with
.BR pyko
.RE

.SH CONFIGURATION FILES
When one calls a \fBbuild\fR on the application, it will read the
.BR conf/build.conf.
This defines attributes of the build such as whether you wish to produce a
single binary instead of a dynamic library. If you choose to do so, also
ensure to set
.BR kore_source
and
.BR kore_flavour
and update the \fBldflags\fR to include the appropriate libraries you intend
to link the binary with. You may also set custom \fBcflags\fR either global to
the flavours or per flavour configurations. 

When a \fBcreate [app]\fR is called, kodev will also create an \fBapp.conf\fR
where 'app' is the name of the project. This configuration describes to Kore
what modules to load, how validators work, what page handlers to map and which
functions and more. Technical documentation regarding the specifics of this
may be found in
.BR KORE(3)

.SH EXAMPLES
Changing flavour of the build;

.RS
kodev flavor osx
.RE

Creating a new application 'app' with \fBpyko\fR support;

.RS
kodev create \-p app
.RE

.SH REPORTING BUGS, CONTRIBUTING && MORE
If you run into any bugs, have suggestions or patches, please contact me at
.BR <joris@coders.se>

More information can be found at
.BR <https://kore.io/>

.SH AUTHOR
.BR kore
developed by Joris Vink
.BR <joris@coders.se>

Manpage authored by Guy Nankivell
.BR <guynankivell@gmail.com>

.SH LICENCE
Usage of this software is provided under the
.BR ISC
license which may be found, with the source, at
.BR <https://github.com/jorisvink/kore>

