.TH KODEV 1
.SH NAME
kodev \- Kore project management tool

.SH SYNOPSIS
.BR kodev
[\fIOPTION\fR] ...

.SH DESCRIPTION
This documentation describes the application management tools for building and
running a kore project. For information regarding the technical interface and
C bindings, look to
.BR KORE(3)
where these functions and structures are described.
.BR kore
projects may be managed using the following OPTIONS;

.BR create
.RS
Create a new application skeleton with the name that is passed to it. This will
create a new directory with all the files required to begin hacking about.
This will also generate a self-signed certificate \fIunless\fR single\-binary
is enabled in the
.BR conf/build.conf
and \fBNOTLS=1\fR is set in the active flavour. Note that this certificate
should not be used for production.
.RE

.BR build
.RS
Build the application. The properties of this build are read from
.BR conf/build.conf
and the semantics of which are discussed in \fBCONFIGURATION FILES\fR.
.RE

.BR run
.RS
Run an application (\-fnr implied). The current directory is the path of the
project to be run. This will read from the \fBconf/app.conf\fR discussed in
\fBCONFIGURATION FILES\fR unless otherwise specified. This will build the
application\(emif necessary\(emand start it in the foregound. \fB^C\fR
will stop the process. By default, \fBkore\fR binds to port 8888 on
.BR localhost
and again, this behaviour may be configured in your
.BR conf/app.conf .
If the single\-binary mode is turned on, then that binary will be run as
opposed to the default
.BR $PREFIX/bin/kore .
.RE

.BR reload
.RS
Reload the application (SIGHUP sent). This in turn triggers a reload of all the
currently loaded modules.
.RE

.BR info
.RS
Show info on kore on this system. Namely; active flavour, output type, kore
features, kore source and kore binary.
.RE

.BR clean
.RS
Cleanup the build files.
.RE

.BR flavour
.RS
Switch between build flavours with the argument being the new flavour.
.RE

.BR help
.RS
Show the help synopsis.
.RE

.BR \-p
.RS
Option used in conjunction with \fBcreate\fR to generate an application for use
with
.BR pyko
.RE

.SH CONFIGURATION FILES
When one calls a \fBbuild\fR on the application, it will read the
.BR conf/build.conf.
This defines attributes of the build such as whether you wish to produce a
single binary instead of a dynamic library. If you choose to do so, also
ensure to set
.BR kore_source
and
.BR kore_flavour
and update the \fBldflags\fR to include the appropriate libraries you intend
to link the binary with. You may also set custom \fBcflags\fR either global to
the flavours or per flavour configurations.

When a \fBcreate [app]\fR is called, kodev will also create an \fBapp.conf\fR
where 'app' is the name of the project. This configuration describes to Kore
what modules to load, how validators work, what page handlers to map and which
functions and more. The specifics of which are discussed below;
.RS

.BR socket_backlog
Maximum length to queue pending connections. See \fBlisten(\fR2\fB)\fR

.BR bind
Bind to a given IP address and port number.

.BR chroot
The path to which the worker processes will \fBchroot()\fR into.

.BR runas
The username the worker process inherit privileges from.

.BR workers
The number of worker processes to spawn and keep alive. Default is 1.

.BR worker_max_connections
The number of active connections each worker will accept. Default is 250.

.BR worker_rlimit_nofiles
Limit of maximum open files per worker.

.BR worker_accept_threshold
Limit the number of new connections a worker can accept in a single event loop.
Per default, \fBkore\fR will accept as many new connections it can until the
\fBworker_max_connections\fR. Default is 'disabled'.

.BR worker_set_affinity
Workers bind themselves to a single CPU by default. To disable this behaviour,
set this option to 0.

.BR pidfile
Store the pid of the parent process in the file passed to this. Default is
none.

.BR http_header_max
Maximum size of HTTP headers (argument in bytes). Default is 4096.

.BR http_body_max
Maximum size of an HTTP body (argument in bytes). Default is 1024000.
Note that if it is set to 0, this disallows requests with a body all together.

.BR http_body_disk_offload
Number of bytes after which \fBkore\fR will use a temporary file to hold the
HTTP body, instead of holding it in memory. If this is set to 0, no disk
offloading will be done. This is turned off by default; 'disabled'.

.BR http_body_disk_path
Path where \fBkore\fR will store any temporary HTTP body files. The default
is \fItmp_files\fR.

.BR http_keepalive_time
Maximum number of seconds and HTTP connection may be kept open by a browser.
The default is 20 seconds, set to 0 to turn off keep-alive entirely.

.BR http_hsts_enable
If not 0, this is the age of the HSTS header that is included in all responses.
The default is 31536000 seconds.

.BR http_request_limit
The number of HTTP requests \fBkore\fR workers will process in one loop.
The default is 'disabled'.

.BR websocket_timeout
The number of seconds a websocket connection is kept open without traffic.
The default here is 120 seconds.

.BR task_threads
The number of OS threads to use for background tasks. The default here is
\(emvery conservatively\(em2.

.BR tls_version
The TLS versions allowed, by default this is set to \fIonly\fR TLSv1.2.

.BR tls_cipher
The  server TLS ciphersuites that are permitted. The default is a very
sane set of ciphersuites preferring AEAD ciphers and ephemeral key exchanges
over static RSA.

.BR tls_dhparam
The DH parameters to load (\fBrequired\fR). The default is dh2048.pem

.RE

.SH EXAMPLES
Changing flavour of the build;

.RS
kodev flavor osx
.RE

Creating a new application 'app' with \fBpyko\fR support;

.RS
kodev create \-p app
.RE

.SH REPORTING BUGS, CONTRIBUTING && MORE
If you run into any bugs, have suggestions or patches, please contact me at
.BR <joris@coders.se>

More information can be found at
.BR <https://kore.io/>

.SH AUTHOR
.BR kore
developed by Joris Vink
.BR <joris@coders.se>

Manpage authored by Guy Nankivell
.BR <guynankivell@gmail.com>

.SH LICENCE
Usage of this software is provided under the
.BR ISC
license which may be found, with the source, at
.BR <https://github.com/jorisvink/kore>

